{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactSwipeable = require('react-swipeable');\n\nvar _reactSwipeable2 = _interopRequireDefault(_reactSwipeable);\n\nvar _utils = require('./utils');\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _propTypes = require('./propTypes');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AliceCarousel = function (_React$PureComponent) {\n  _inherits(AliceCarousel, _React$PureComponent);\n\n  function AliceCarousel(props) {\n    _classCallCheck(this, AliceCarousel);\n\n    var _this = _possibleConstructorReturn(this, (AliceCarousel.__proto__ || Object.getPrototypeOf(AliceCarousel)).call(this, props));\n\n    _this._windowResizeHandler = function () {\n      if (Utils.shouldCallHandlerOnWindowResize(_this.deviceInfo)) {\n        var _this$state = _this.state,\n            currentIndex = _this$state.currentIndex,\n            isPlaying = _this$state.isPlaying;\n\n        _this._pause();\n\n        _this._resetAllIntermediateProps();\n\n        _this._disableAnimation();\n\n        _this.deviceInfo = Utils.deviceInfo();\n        var currState = Utils.calculateInitialProps(_this.props, _this.stageComponent);\n        var translate3d = Utils.getTranslate3dPosition(currentIndex, currState);\n\n        var nextState = _extends({}, currState, {\n          currentIndex: currentIndex,\n          translate3d: translate3d\n        });\n\n        _this.setState(nextState, function () {\n          _this.props.autoPlay && isPlaying && _this._play();\n\n          _this._allowAnimation();\n\n          _this._onResized();\n        });\n      }\n    };\n\n    _this._onSlideToIndexChange = function (currentIndex, slideToIndex) {\n      if (slideToIndex === currentIndex + 1) {\n        _this._slideNext();\n      } else if (slideToIndex === currentIndex - 1) {\n        _this._slidePrev();\n      } else {\n        _this._onDotClick(slideToIndex);\n      }\n    };\n\n    _this._onInactiveItem = function () {\n      _this._onSlideChange();\n\n      _this._onSlideChanged();\n\n      _this._allowAnimation();\n\n      _this._pause();\n    };\n\n    _this._onDotClick = function (itemIndex) {\n      if (_this.state.currentIndex === itemIndex || !_this.allowAnimation || _this.swipeAnimation) {\n        return;\n      }\n\n      _this._disableAnimation();\n\n      _this._isFadeOutAnimationAllowed() && _this._setAnimationPropsOnDotsClick(itemIndex);\n      _this.props.disableAutoPlayOnAction && _this._pause();\n\n      _this._slideToItem(itemIndex);\n    };\n\n    _this._recalculateFadeOutAnimationState = function (shouldRecalculate) {\n      if (shouldRecalculate || _this._isFadeOutAnimationAllowed()) {\n        return {\n          fadeoutAnimationProcessing: false\n        };\n      }\n\n      return {};\n    };\n\n    _this._getStageComponentNode = function (node) {\n      return _this.stageComponent = node;\n    };\n\n    _this._allowAnimation = function () {\n      return _this.allowAnimation = true;\n    };\n\n    _this._disableAnimation = function () {\n      return _this.allowAnimation = false;\n    };\n\n    _this._isHovered = function () {\n      return _this.isHovered;\n    };\n\n    _this._skipSlidePositionRecalculation = function () {\n      if (_this._isFadeOutAnimationAllowed()) {\n        _this._resetFadeOutAnimationState();\n\n        return;\n      }\n\n      _this._onSlideChanged();\n\n      _this.props.disableAutoPlayOnAction && _this._pause();\n      _this.isHovered = false;\n    };\n\n    _this._updateSlidePosition = function () {\n      window.setTimeout(function () {\n        if (_this._shouldRecalculatePosition()) {\n          _this._recalculateSlidePosition();\n        } else if (_this._isFadeOutAnimationAllowed()) {\n          _this._resetFadeOutAnimationState();\n        } else {\n          _this._onSlideChanged();\n        }\n      }, _this.state.duration);\n    };\n\n    _this._shouldRecalculatePosition = function () {\n      var _this$state2 = _this.state,\n          slides = _this$state2.slides,\n          currentIndex = _this$state2.currentIndex;\n      return currentIndex < 0 || currentIndex >= slides.length;\n    };\n\n    _this._resetFadeOutAnimationState = function () {\n      _this.setState({\n        fadeoutAnimationProcessing: false\n      }, _this._onSlideChanged);\n    };\n\n    _this._resetAllIntermediateProps = function () {\n      _this.swipingStarted = false;\n      _this.touchEventsCallstack = [];\n      _this.verticalSwipingDetected = false;\n\n      _this._allowAnimation();\n\n      _this._stopSwipeAnimation();\n\n      _this._resetAnimationProps();\n\n      _this._resetSwipePositionProps();\n\n      _this._resetTranslateAnimationProcessingFlag();\n    };\n\n    _this._recalculateSlidePosition = function () {\n      var currentIndex = Utils.recalculateCurrentSlideIndex(_this.state);\n      var translate3d = Utils.recalculateTranslatePosition(_this.state);\n\n      _this.setState(_extends({\n        currentIndex: currentIndex,\n        translate3d: translate3d\n      }, _this._recalculateFadeOutAnimationState(), {\n        style: {\n          transition: 'transform 0ms ease-out'\n        }\n      }), function () {\n        return _this._onSlideChanged();\n      });\n    };\n\n    _this._slideIndexInfoComponent = function () {\n      var _this$state3 = _this.state,\n          currentIndex = _this$state3.currentIndex,\n          slides = _this$state3.slides;\n\n      var _Utils$getSlideInfo = Utils.getSlideInfo(currentIndex, slides.length),\n          slideIndex = _Utils$getSlideInfo.slideIndex,\n          slidesLength = _Utils$getSlideInfo.slidesLength;\n\n      return _react2.default.createElement('div', {\n        className: 'alice-carousel__slide-info'\n      }, _react2.default.createElement('span', {\n        className: 'alice-carousel__slide-info-item'\n      }, slideIndex), _react2.default.createElement('span', {\n        className: 'alice-carousel__slide-info-item alice-carousel__slide-info-item--separator'\n      }, '/'), _react2.default.createElement('span', {\n        className: 'alice-carousel__slide-info-item'\n      }, slidesLength));\n    };\n\n    _this._getEventObject = function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state;\n      var itemsInSlide = state.items,\n          item = state.currentIndex;\n\n      var slide = _this._getActiveSlideIndex(state);\n\n      return {\n        item: item,\n        slide: slide,\n        itemsInSlide: itemsInSlide\n      };\n    };\n\n    _this._getActiveSlideIndex = function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state;\n      var slides = state.slides,\n          items = state.items,\n          currentIndex = state.currentIndex;\n\n      var _Utils$isInactiveItem = Utils.isInactiveItem(state),\n          inactiveNext = _Utils$isInactiveItem.inactiveNext;\n\n      return Utils.getActiveSlideIndex(inactiveNext, currentIndex, items, slides.length);\n    };\n\n    _this._setAnimationPropsOnDotsClick = function (itemIndex) {\n      var _this$state4 = _this.state,\n          currentIndex = _this$state4.currentIndex,\n          itemWidth = _this$state4.itemWidth;\n      var fadeOutIndex = currentIndex + 1;\n      var fadeOutOffset = Utils.getFadeOutOffset(itemIndex, currentIndex, itemWidth);\n\n      _this._setAnimationProps({\n        fadeOutIndex: fadeOutIndex,\n        fadeOutOffset: fadeOutOffset,\n        allowFadeOutAnimation: true\n      });\n    };\n\n    _this._getItemIndexForDotNavigation = function (i, dotsLength) {\n      var _this$state5 = _this.state,\n          slides = _this$state5.slides,\n          items = _this$state5.items,\n          infinite = _this$state5.infinite;\n      var isNotInfinite = infinite === false;\n      return isNotInfinite && i === dotsLength - 1 ? slides.length - items : i * items;\n    };\n\n    _this._pause = function () {\n      if (_this._autoPlayIntervalId) {\n        window.clearInterval(_this._autoPlayIntervalId);\n        _this._autoPlayIntervalId = null;\n\n        _this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    _this._playPauseToggle = function () {\n      if (!_this.allowAnimation) return;\n      _this.state.isPlaying ? _this._pause() : _this._play();\n    };\n\n    _this._keyUpHandler = function (e) {\n      switch (e.keyCode) {\n        case 32:\n          return _this._handleOnSpaceBarClick();\n\n        case 37:\n          return _this._slidePrev();\n\n        case 39:\n          return _this._slideNext();\n      }\n    };\n\n    _this._handleOnSpaceBarClick = function () {\n      _this.props.autoPlay && _this._playPauseToggle();\n    };\n\n    _this._intermediateStateProps = function (duration, shouldSkipRecalculation) {\n      var condition = _this._isFadeOutAnimationAllowed() && !shouldSkipRecalculation;\n      return Utils.intermediateTransitionProps(condition, duration);\n    };\n\n    _this._isFadeOutAnimationAllowed = function () {\n      var _this$state6 = _this.state,\n          stagePadding = _this$state6.stagePadding,\n          items = _this$state6.items;\n      var paddingLeft = stagePadding.paddingLeft,\n          paddingRight = stagePadding.paddingRight;\n      return _this.props.fadeOutAnimation && !(paddingLeft || paddingRight) && items === 1;\n    };\n\n    _this._isSwipeDisable = function () {\n      return _this.props.swipeDisabled || _this.state.fadeOutAnimation || _this.verticalSwipingDetected;\n    };\n\n    _this._addTouchEventToCallstack = function () {\n      _this.touchEventsCallstack.push(1);\n    };\n\n    _this._removeTouchEventFromCallstack = function () {\n      _this.touchEventsCallstack.pop();\n    };\n\n    _this._setTranslateAnimationProcessingFlag = function () {\n      _this.translateAnimationProcessing = true;\n    };\n\n    _this._resetTranslateAnimationProcessingFlag = function () {\n      _this.translateAnimationProcessing = false;\n    };\n\n    _this._startSwipeAnimation = function () {\n      _this.swipeAnimation = true;\n    };\n\n    _this._stopSwipeAnimation = function () {\n      _this.swipeAnimation = false;\n    };\n\n    _this._setAnimationProps = function (newProps) {\n      var prevProps = _this.animationProps || {};\n      _this.animationProps = _extends({}, prevProps, newProps);\n    };\n\n    _this._resetAnimationProps = function () {\n      _this.animationProps = {};\n    };\n\n    _this._setSwipePositionProps = function (newProps) {\n      var prevProps = _this.swipePosition || {};\n      _this.swipePosition = _extends({}, prevProps, newProps);\n    };\n\n    _this._resetSwipePositionProps = function () {\n      _this.swipePosition = {};\n    };\n\n    _this._calculateSwipeIndex = function () {\n      var itemWidth = _this.state.itemWidth;\n      var swipePosition = Math.abs(_this.swipePosition.position);\n      return _this.swipePosition.direction === 'LEFT' ? Math.floor(swipePosition / itemWidth) + 1 : Math.floor(swipePosition / itemWidth);\n    };\n\n    _this._getTranslateXPosition = function () {\n      var translate3d = _this.state.translate3d;\n      var _this$swipePosition$s = _this.swipePosition.startPosition,\n          startPosition = _this$swipePosition$s === undefined ? translate3d : _this$swipePosition$s;\n\n      if (!!_this.touchEventsCallstack.length && _this.translateAnimationProcessing) {\n        _this._resetTranslateAnimationProcessingFlag();\n\n        var lastTranslateXPosition = Utils.getTranslateX(_this.stageComponent);\n\n        if (lastTranslateXPosition) {\n          return lastTranslateXPosition;\n        }\n      }\n\n      return startPosition;\n    };\n\n    _this._getStartSwipePositionOnTouchMove = function (deltaX) {\n      return _this._getTranslateXPosition() - deltaX;\n    };\n\n    _this._onTouchEnd = function () {\n      _this.swipingStarted = false;\n\n      if (_this._isSwipeDisable()) {\n        return;\n      }\n\n      _this._addTouchEventToCallstack();\n\n      _this._setSwipePositionProps({\n        startPosition: _this.swipePosition.position\n      });\n\n      _this._beforeTouchEnd();\n    };\n\n    _this._onMouseEnterAutoPlayHandler = function () {\n      if (_this.props.stopAutoPlayOnHover) {\n        _this.isHovered = true;\n      }\n    };\n\n    _this._onMouseLeaveAutoPlayHandler = function () {\n      _this.isHovered = false;\n    };\n\n    _this._setAnimationPropsOnPrevNextClick = function () {\n      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'next';\n      var _this$state7 = _this.state,\n          currentIndex = _this$state7.currentIndex,\n          itemWidth = _this$state7.itemWidth;\n      var fadeOutIndex = currentIndex === 0 ? 1 : currentIndex + 1;\n      var fadeOutOffset = direction === 'next' ? itemWidth : -itemWidth;\n\n      _this._setAnimationProps({\n        fadeOutIndex: fadeOutIndex,\n        fadeOutOffset: fadeOutOffset,\n        allowFadeOutAnimation: true\n      });\n    };\n\n    _this._slidePrev = function () {\n      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!_this.allowAnimation || _this.swipeAnimation) {\n        return;\n      }\n\n      _this._disableAnimation();\n\n      var _Utils$isInactiveItem2 = Utils.isInactiveItem(_this.state),\n          inactivePrev = _Utils$isInactiveItem2.inactivePrev;\n\n      if (_this._isFadeOutAnimationAllowed()) {\n        _this._setAnimationPropsOnPrevNextClick('prev');\n      }\n\n      if (inactivePrev) {\n        _this._onInactiveItem();\n\n        return;\n      }\n\n      if (action && _this.props.disableAutoPlayOnAction) {\n        _this._pause();\n      }\n\n      _this._slideToItem(_this.state.currentIndex - 1);\n    };\n\n    _this._slideNext = function () {\n      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!_this.allowAnimation || _this.swipeAnimation) {\n        return;\n      }\n\n      _this._disableAnimation();\n\n      var _Utils$isInactiveItem3 = Utils.isInactiveItem(_this.state),\n          inactiveNext = _Utils$isInactiveItem3.inactiveNext;\n\n      if (inactiveNext) {\n        _this._onInactiveItem();\n\n        return;\n      }\n\n      if (action && _this.props.disableAutoPlayOnAction) {\n        _this._pause();\n      }\n\n      if (_this._isFadeOutAnimationAllowed()) {\n        _this._setAnimationPropsOnPrevNextClick('next');\n      }\n\n      _this._slideToItem(_this.state.currentIndex + 1);\n    };\n\n    _this._renderStageItem = function (item, i) {\n      var itemStyle = Utils.itemStyles(i, _this.state, _this.animationProps);\n      var itemClassName = Utils.itemClassName(i, _this.state, _this.animationProps);\n      return _react2.default.createElement('li', {\n        style: itemStyle,\n        className: itemClassName,\n        key: i\n      }, item);\n    };\n\n    _this.state = {\n      clones: [],\n      currentIndex: 1,\n      stagePadding: {},\n      duration: props.duration,\n      slides: Utils.getSlides(props),\n      style: {\n        transition: 'transform 0ms ease-out'\n      }\n    };\n    _this._onTouchMove = _this._onTouchMove.bind(_this);\n    _this.handleOnResize = Utils.debounce(_this._windowResizeHandler, 100);\n    return _this;\n  }\n\n  _createClass(AliceCarousel, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._setInitialState();\n\n      this._resetAllIntermediateProps();\n\n      window.addEventListener('resize', this.handleOnResize);\n\n      if (!this.props.keysControlDisabled) {\n        window.addEventListener('keyup', this._keyUpHandler);\n      }\n\n      this.deviceInfo = Utils.deviceInfo();\n      this.props.autoPlay && this._play();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var slideToIndex = nextProps.slideToIndex,\n          duration = nextProps.duration,\n          fadeOutAnimation = nextProps.fadeOutAnimation;\n\n      if (this.props.duration !== duration) {\n        this.setState({\n          duration: duration\n        });\n      }\n\n      if (this.props.fadeOutAnimation !== fadeOutAnimation) {\n        this.setState({\n          fadeoutAnimationProcessing: false\n        }, this._resetAnimationProps);\n      }\n\n      if (slideToIndex !== this.props.slideToIndex) {\n        this._onSlideToIndexChange(this.state.currentIndex, slideToIndex);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.disableAutoPlayOnAction !== prevProps.disableAutoPlayOnAction || this.props.autoPlayDirection !== prevProps.autoPlayDirection || this.props.autoPlayInterval !== prevProps.autoPlayInterval || this.props.infinite !== prevProps.infinite || this.props.autoPlay !== prevProps.autoPlay) {\n        this.props.autoPlay ? this._play() : this._pause();\n      }\n\n      if (this.props.stagePadding !== prevProps.stagePadding || this.props.responsive !== prevProps.responsive || this.props.infinite !== prevProps.infinite || this.props.items !== prevProps.items) {\n        this._resetAllIntermediateProps();\n\n        this.setState(Utils.calculateInitialProps(this.props, this.stageComponent));\n      }\n\n      if (this.props.keysControlDisabled !== prevProps.keysControlDisabled) {\n        this.props.keysControlDisabled ? window.removeEventListener('keyup', this._keyUpHandler) : window.addEventListener('keyup', this._keyUpHandler);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleOnResize);\n\n      if (!this.props.keysControlDisabled) {\n        window.removeEventListener('keyup', this._keyUpHandler);\n      }\n\n      if (this._autoPlayIntervalId) {\n        window.clearInterval(this._autoPlayIntervalId);\n        this._autoPlayIntervalId = null;\n      }\n    }\n  }, {\n    key: '_onSlideChange',\n    value: function _onSlideChange() {\n      if (this.props.onSlideChange) {\n        this.props.onSlideChange(this._getEventObject());\n      }\n    }\n  }, {\n    key: '_onSlideChanged',\n    value: function _onSlideChanged() {\n      if (this.props.onSlideChanged) {\n        this.props.onSlideChanged(this._getEventObject());\n      }\n\n      this._allowAnimation();\n    }\n  }, {\n    key: '_onInitialized',\n    value: function _onInitialized(initialState) {\n      if (this.props.onInitialized) {\n        this.props.onInitialized(this._getEventObject(initialState));\n      }\n    }\n  }, {\n    key: '_onResized',\n    value: function _onResized() {\n      if (this.props.onResized) {\n        this.props.onResized(this._getEventObject());\n      }\n    }\n  }, {\n    key: '_setInitialState',\n    value: function _setInitialState() {\n      var initialState = Utils.calculateInitialProps(this.props, this.stageComponent);\n      this.setState(initialState, this._onInitialized(initialState));\n    }\n  }, {\n    key: '_checkSlidePosition',\n    value: function _checkSlidePosition(shouldSkipRecalculation) {\n      this._stopSwipeAnimation();\n\n      this._resetAnimationProps();\n\n      this._resetSwipePositionProps();\n\n      shouldSkipRecalculation ? this._skipSlidePositionRecalculation() : this._updateSlidePosition();\n    }\n  }, {\n    key: '_prevButton',\n    value: function _prevButton() {\n      var _Utils$isInactiveItem4 = Utils.isInactiveItem(this.state),\n          inactivePrev = _Utils$isInactiveItem4.inactivePrev;\n\n      var className = 'alice-carousel__prev-btn-item' + (inactivePrev ? ' __inactive' : '');\n      return _react2.default.createElement('div', {\n        className: 'alice-carousel__prev-btn'\n      }, _react2.default.createElement('div', {\n        className: 'alice-carousel__prev-btn-wrapper',\n        onMouseEnter: this._onMouseEnterAutoPlayHandler,\n        onMouseLeave: this._onMouseLeaveAutoPlayHandler\n      }, _react2.default.createElement('p', {\n        className: className,\n        onClick: this._slidePrev\n      }, _react2.default.createElement('span', {\n        'data-area': 'Prev'\n      }))));\n    }\n  }, {\n    key: '_nextButton',\n    value: function _nextButton() {\n      var _Utils$isInactiveItem5 = Utils.isInactiveItem(this.state),\n          inactiveNext = _Utils$isInactiveItem5.inactiveNext;\n\n      var className = 'alice-carousel__next-btn-item' + (inactiveNext ? ' __inactive' : '');\n      return _react2.default.createElement('div', {\n        className: 'alice-carousel__next-btn'\n      }, _react2.default.createElement('div', {\n        className: 'alice-carousel__next-btn-wrapper',\n        onMouseEnter: this._onMouseEnterAutoPlayHandler,\n        onMouseLeave: this._onMouseLeaveAutoPlayHandler\n      }, _react2.default.createElement('p', {\n        className: className,\n        onClick: this._slideNext\n      }, _react2.default.createElement('span', {\n        'data-area': 'Next'\n      }))));\n    }\n  }, {\n    key: '_renderDotsNavigation',\n    value: function _renderDotsNavigation() {\n      var _this2 = this;\n\n      var _state = this.state,\n          slides = _state.slides,\n          items = _state.items;\n      var dotsLength = Utils.getDotsCeilLength(slides.length, items);\n      return _react2.default.createElement('ul', {\n        className: 'alice-carousel__dots'\n      }, slides.map(function (item, i) {\n        if (i < dotsLength) {\n          var itemIndex = _this2._getItemIndexForDotNavigation(i, dotsLength);\n\n          var className = _this2._getActiveSlideIndex() === i ? ' __active' : '';\n          return _react2.default.createElement('li', {\n            key: i,\n            onClick: function onClick() {\n              return _this2._onDotClick(itemIndex);\n            },\n            onMouseEnter: _this2._onMouseEnterAutoPlayHandler,\n            onMouseLeave: _this2._onMouseLeaveAutoPlayHandler,\n            className: 'alice-carousel__dots-item' + className\n          });\n        }\n      }));\n    }\n  }, {\n    key: '_renderPlayPauseButton',\n    value: function _renderPlayPauseButton() {\n      return _react2.default.createElement('div', {\n        className: 'alice-carousel__play-btn'\n      }, _react2.default.createElement('div', {\n        className: 'alice-carousel__play-btn-wrapper'\n      }, _react2.default.createElement('div', {\n        onClick: this._playPauseToggle,\n        className: 'alice-carousel__play-btn-item' + (this.state.isPlaying ? ' __pause' : '')\n      })));\n    }\n  }, {\n    key: '_play',\n    value: function _play() {\n      var _this3 = this;\n\n      var duration = this.state.duration;\n      var _props = this.props,\n          autoPlayDirection = _props.autoPlayDirection,\n          autoPlayInterval = _props.autoPlayInterval;\n      var playInterval = Math.max(autoPlayInterval || duration, duration);\n      this.setState({\n        isPlaying: true\n      });\n\n      if (!this._autoPlayIntervalId) {\n        this._autoPlayIntervalId = window.setInterval(function () {\n          if (!_this3._isHovered() && _this3._autoPlayIntervalId && _this3.state.isPlaying) {\n            autoPlayDirection === 'rtl' ? _this3._slidePrev(false) : _this3._slideNext(false);\n          }\n        }, playInterval);\n      }\n    }\n  }, {\n    key: '_slideToItem',\n    value: function _slideToItem(index) {\n      var _this4 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._onSlideChange();\n\n      var _options$duration = options.duration,\n          duration = _options$duration === undefined ? this.state.duration : _options$duration,\n          _options$shouldSkipRe = options.shouldSkipRecalculation,\n          shouldSkipRecalculation = _options$shouldSkipRe === undefined ? false : _options$shouldSkipRe;\n      var translate3d = Utils.getTranslate3dPosition(index, this.state);\n      this.setState(_extends({\n        currentIndex: index,\n        translate3d: translate3d\n      }, this._intermediateStateProps(duration, shouldSkipRecalculation)), function () {\n        return _this4._checkSlidePosition(shouldSkipRecalculation);\n      });\n    }\n  }, {\n    key: '_onTouchMove',\n    value: function _onTouchMove(e, deltaX, deltaY) {\n      this.swipingStarted = true;\n\n      this._onMouseEnterAutoPlayHandler();\n\n      if (Utils.isVerticalTouchMoveDetected(e, deltaX, deltaY)) {\n        this.verticalSwipingDetected = true;\n        return;\n      } else {\n        this.verticalSwipingDetected = false;\n      }\n\n      if (this._isSwipeDisable()) {\n        return;\n      }\n\n      this._disableAnimation();\n\n      this._startSwipeAnimation();\n\n      var _state2 = this.state,\n          slides = _state2.slides,\n          items = _state2.items,\n          itemWidth = _state2.itemWidth,\n          infinite = _state2.infinite,\n          stagePadding = _state2.stagePadding;\n      var slidesLength = slides.length;\n      var direction = Utils.getSwipeDirection(deltaX);\n\n      var position = this._getStartSwipePositionOnTouchMove(deltaX);\n\n      if (infinite === false) {\n        var leftTranslateLimit = Utils.getLeftTranslateLimit(items, itemWidth);\n        var rightTranslateLimit = Utils.getRightTranslateLimit(slidesLength, itemWidth);\n\n        if (position > leftTranslateLimit || position < rightTranslateLimit) {\n          return;\n        }\n\n        Utils.animate(this.stageComponent, position);\n\n        this._setSwipePositionProps({\n          position: position,\n          direction: direction\n        });\n\n        return;\n      }\n\n      var maxPosition = Utils.getMaxSWipePosition(items, itemWidth, slidesLength);\n      var limitMinPos = Utils.getSwipeMinLimit(itemWidth, stagePadding);\n      var limitMaxPos = Utils.getSwipeMaxLimit(itemWidth, maxPosition, stagePadding);\n\n      if (position >= 0 - limitMinPos || Math.abs(position) >= limitMaxPos) {\n        try {\n          recalculatePosition();\n        } catch (err) {\n          Utils.debug(err);\n        }\n      }\n\n      Utils.animate(this.stageComponent, position);\n\n      this._setSwipePositionProps({\n        position: position,\n        direction: direction\n      });\n\n      function recalculatePosition() {\n        direction === 'RIGHT' ? position += slidesLength * -itemWidth : position += maxPosition - items * itemWidth;\n\n        if (position >= 0 - limitMinPos || Math.abs(position) >= limitMaxPos) {\n          try {\n            recalculatePosition();\n          } catch (err) {\n            Utils.debug(err);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_beforeTouchEnd',\n    value: function _beforeTouchEnd() {\n      var _this5 = this;\n\n      var _state3 = this.state,\n          itemWidth = _state3.itemWidth,\n          items = _state3.items,\n          duration = _state3.duration,\n          infinite = _state3.infinite;\n\n      var swipeIndex = this._calculateSwipeIndex();\n\n      var currentIndex = swipeIndex - items;\n      var translateXPosition = swipeIndex * -itemWidth;\n\n      if (infinite === false) {\n        this._isInfiniteModeDisabledBeforeTouchEnd(swipeIndex, currentIndex);\n\n        return;\n      }\n\n      Utils.animate(this.stageComponent, translateXPosition, duration);\n\n      this._setTranslateAnimationProcessingFlag();\n\n      setTimeout(function () {\n        _this5._removeTouchEventFromCallstack();\n\n        _this5._resetTranslateAnimationProcessingFlag();\n\n        if (!_this5.swipingStarted && _this5.touchEventsCallstack.length === 0) {\n          var nextItemIndex = Utils.getNextItemIndexBeforeTouchEnd(translateXPosition, _this5.state);\n          var nextTranslateXPosition = Utils.getTranslate3dPosition(nextItemIndex, _this5.state);\n          Utils.animate(_this5.stageComponent, nextTranslateXPosition, 0);\n\n          _this5._slideToItem(nextItemIndex, {\n            duration: 0,\n            shouldSkipRecalculation: true\n          });\n        }\n      }, duration);\n    }\n  }, {\n    key: '_isInfiniteModeDisabledBeforeTouchEnd',\n    value: function _isInfiniteModeDisabledBeforeTouchEnd(swipeIndex, currentIndex) {\n      var _this6 = this;\n\n      var _state4 = this.state,\n          items = _state4.items,\n          itemWidth = _state4.itemWidth,\n          duration = _state4.duration,\n          slides = _state4.slides;\n      var position = Utils.getTranslate3dPosition(currentIndex, {\n        itemWidth: itemWidth,\n        items: items\n      });\n\n      if (swipeIndex < items) {\n        currentIndex = 0;\n        position = items * -itemWidth;\n      }\n\n      if (swipeIndex > slides.length) {\n        currentIndex = slides.length - items;\n        position = slides.length * -itemWidth;\n      }\n\n      Utils.animate(this.stageComponent, position, duration);\n\n      this._setTranslateAnimationProcessingFlag();\n\n      setTimeout(function () {\n        _this6._removeTouchEventFromCallstack();\n\n        _this6._resetTranslateAnimationProcessingFlag();\n\n        if (!_this6.swipingStarted && _this6.touchEventsCallstack.length === 0) {\n          Utils.animate(_this6.stageComponent, position);\n\n          _this6._slideToItem(currentIndex, {\n            duration: 0,\n            shouldSkipRecalculation: true\n          });\n        }\n      }, duration);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state5 = this.state,\n          style = _state5.style,\n          translate3d = _state5.translate3d,\n          clones = _state5.clones;\n      var stagePadding = Utils.getStagePadding(this.props);\n      var stageStyle = Utils.stageStyle(style, translate3d);\n      var wrapperStyle = Utils.wrapperStyle(stagePadding);\n      return _react2.default.createElement('div', {\n        className: 'alice-carousel'\n      }, _react2.default.createElement(_reactSwipeable2.default, {\n        rotationAngle: 3,\n        stopPropagation: true,\n        onSwiping: this._onTouchMove,\n        onSwiped: this._onTouchEnd,\n        trackMouse: this.props.mouseDragEnabled,\n        preventDefaultTouchmoveEvent: this.props.preventEventOnTouchMove\n      }, _react2.default.createElement('div', {\n        style: wrapperStyle,\n        className: 'alice-carousel__wrapper',\n        onMouseEnter: this._onMouseEnterAutoPlayHandler,\n        onMouseLeave: this._onMouseLeaveAutoPlayHandler\n      }, _react2.default.createElement('ul', {\n        style: stageStyle,\n        className: 'alice-carousel__stage',\n        ref: this._getStageComponentNode\n      }, clones.map(this._renderStageItem)))), this.props.showSlideInfo ? this._slideIndexInfoComponent() : null, !this.props.dotsDisabled ? this._renderDotsNavigation() : null, !this.props.buttonsDisabled ? this._prevButton() : null, !this.props.buttonsDisabled ? this._nextButton() : null, this.props.playButtonEnabled ? this._renderPlayPauseButton() : null);\n    }\n  }]);\n\n  return AliceCarousel;\n}(_react2.default.PureComponent);\n\nexports.default = AliceCarousel;\nAliceCarousel.propTypes = _extends({}, _propTypes.propTypes);\nAliceCarousel.defaultProps = _extends({}, _propTypes.defaultProps);","map":null,"metadata":{},"sourceType":"script"}